#include "Texture.h"

#include <vector>
#include <iostream>
#include <fstream>
#include <map>

#include <ddspp.h>

static VkFormat GetDSSVulkanFormat( unsigned int DXGIFormat );

void Texture::LoadDDS( Vlk::Renderer* renderer, const char* path )
    {
	std::ifstream fs;

	fs.open( path, std::ifstream::binary | std::ifstream::ate );
	if(!fs.is_open())
		{
		char str[200];
		sprintf_s( str, "Error: Can't read file %s", path );
		throw std::runtime_error(str);
		}

	// get size
	std::streampos fsize = fs.tellg();
	fs.seekg( 0, std::ios::_Seekbeg );

	// allocate memory and read file 
	std::vector<unsigned char> mem(fsize);
	fs.read((char*)mem.data(),fsize);
	fs.close();

	// decode dds header
	ddspp::Descriptor desc;
	ddspp::decode_header( mem.data(), desc );
	VkFormat pixelFormat = GetDSSVulkanFormat( desc.format );

	// set up base pointer
	unsigned char *pSrc = &mem[desc.headerSize];
	VkDeviceSize srcSize = (VkDeviceSize)fsize - (VkDeviceSize)desc.headerSize;

	std::vector<VkDeviceSize> mipmap_offsets(desc.numMips);
	for(uint m = 0; m < desc.numMips; ++m)
		{
		mipmap_offsets[m] = (VkDeviceSize)ddspp::get_offset( desc, m, 0 );
		}

	// allocate image
	Vlk::ImageTemplate templ = Vlk::ImageTemplate::Texture2D( pixelFormat , desc.width , desc.height, desc.numMips, pSrc, srcSize, mipmap_offsets.data() );
	this->Image = renderer->CreateImage( templ );
    }

Texture::~Texture()
	{
	if( this->Image )
		delete this->Image;
	}

struct FormatDXVKConvert
	{
	VkFormat PreferredColor = VK_FORMAT_UNDEFINED;
	VkFormat PreferredDepth = VK_FORMAT_UNDEFINED;
	VkFormat BitCompatible = VK_FORMAT_UNDEFINED;
	VkImageAspectFlags AspectColor = 0;
	VkImageAspectFlags AspectDepth = 0;
	};

static const std::map<unsigned int, FormatDXVKConvert> DXToVulkanFormatConversion =
	{
		{ ddspp::R32G32B32A32_TYPELESS,{VK_FORMAT_R32G32B32A32_UINT, VK_FORMAT_UNDEFINED,VK_FORMAT_R32G32B32A32_UINT} },
		{ ddspp::R32G32B32A32_FLOAT,{VK_FORMAT_R32G32B32A32_SFLOAT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32G32B32A32_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R32G32B32A32_UINT,{VK_FORMAT_R32G32B32A32_UINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32G32B32A32_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R32G32B32A32_SINT,{VK_FORMAT_R32G32B32A32_SINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32G32B32A32_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R32G32B32_TYPELESS,{VK_FORMAT_R32G32B32_UINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32G32B32_UINT} },
		{ ddspp::R32G32B32_FLOAT,{VK_FORMAT_R32G32B32_SFLOAT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32G32B32_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R32G32B32_UINT,{VK_FORMAT_R32G32B32_UINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32G32B32_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R32G32B32_SINT,{VK_FORMAT_R32G32B32_SINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32G32B32_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16G16B16A16_TYPELESS,{VK_FORMAT_R16G16B16A16_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R16G16B16A16_UINT} },
		{ ddspp::R16G16B16A16_FLOAT,{VK_FORMAT_R16G16B16A16_SFLOAT,VK_FORMAT_UNDEFINED,VK_FORMAT_R16G16B16A16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16G16B16A16_UNORM,{VK_FORMAT_R16G16B16A16_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R16G16B16A16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16G16B16A16_UINT,{VK_FORMAT_R16G16B16A16_UINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R16G16B16A16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16G16B16A16_SNORM,{VK_FORMAT_R16G16B16A16_SNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R16G16B16A16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16G16B16A16_SINT,{VK_FORMAT_R16G16B16A16_SINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R16G16B16A16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R32G32_TYPELESS,{VK_FORMAT_R32G32_UINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32G32_UINT} },
		{ ddspp::R32G32_FLOAT,{VK_FORMAT_R32G32_SFLOAT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32G32_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R32G32_UINT,{VK_FORMAT_R32G32_UINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32G32_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R32G32_SINT,{VK_FORMAT_R32G32_SINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32G32_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R32G8X24_TYPELESS,{VK_FORMAT_UNDEFINED,VK_FORMAT_D32_SFLOAT_S8_UINT,VK_FORMAT_UNDEFINED} },
		{ ddspp::D32_FLOAT_S8X24_UINT,{VK_FORMAT_UNDEFINED,VK_FORMAT_D32_SFLOAT_S8_UINT,VK_FORMAT_UNDEFINED,0,VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT} },
		{ ddspp::R32_FLOAT_X8X24_TYPELESS,{VK_FORMAT_UNDEFINED,VK_FORMAT_D32_SFLOAT_S8_UINT,VK_FORMAT_UNDEFINED,0,VK_IMAGE_ASPECT_DEPTH_BIT} },
		{ ddspp::X32_TYPELESS_G8X24_UINT,{VK_FORMAT_UNDEFINED,VK_FORMAT_D32_SFLOAT_S8_UINT,VK_FORMAT_UNDEFINED,0,VK_IMAGE_ASPECT_STENCIL_BIT} },
		{ ddspp::R10G10B10A2_TYPELESS,{VK_FORMAT_A2B10G10R10_UNORM_PACK32,VK_FORMAT_UNDEFINED,VK_FORMAT_A2B10G10R10_UINT_PACK32} },
		{ ddspp::R10G10B10A2_UNORM,{VK_FORMAT_A2B10G10R10_UNORM_PACK32,VK_FORMAT_UNDEFINED,VK_FORMAT_A2B10G10R10_UINT_PACK32,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R10G10B10A2_UINT,{VK_FORMAT_A2B10G10R10_UINT_PACK32,VK_FORMAT_UNDEFINED,VK_FORMAT_A2B10G10R10_UINT_PACK32,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R11G11B10_FLOAT,{VK_FORMAT_B10G11R11_UFLOAT_PACK32,VK_FORMAT_UNDEFINED,VK_FORMAT_R32_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8G8B8A8_TYPELESS,{VK_FORMAT_R8G8B8A8_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R8G8B8A8_UINT} },
		{ ddspp::R8G8B8A8_UNORM,{VK_FORMAT_R8G8B8A8_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R8G8B8A8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8G8B8A8_UNORM_SRGB,{VK_FORMAT_R8G8B8A8_SRGB,VK_FORMAT_UNDEFINED,VK_FORMAT_R8G8B8A8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8G8B8A8_UINT,{VK_FORMAT_R8G8B8A8_UINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R8G8B8A8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8G8B8A8_SNORM,{VK_FORMAT_R8G8B8A8_SNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R8G8B8A8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8G8B8A8_SINT,{VK_FORMAT_R8G8B8A8_SINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R8G8B8A8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16G16_TYPELESS,{VK_FORMAT_R16G16_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R16G16_UINT} },
		{ ddspp::R16G16_FLOAT,{VK_FORMAT_R16G16_SFLOAT,VK_FORMAT_UNDEFINED,VK_FORMAT_R16G16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16G16_UNORM,{VK_FORMAT_R16G16_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R16G16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16G16_UINT,{VK_FORMAT_R16G16_UINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R16G16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16G16_SNORM,{VK_FORMAT_R16G16_SNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R16G16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16G16_SINT,{VK_FORMAT_R16G16_SINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R16G16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R32_TYPELESS,{VK_FORMAT_R32_UINT,VK_FORMAT_D32_SFLOAT,VK_FORMAT_R32_UINT} },
		{ ddspp::D32_FLOAT,{VK_FORMAT_UNDEFINED,VK_FORMAT_D32_SFLOAT,VK_FORMAT_UNDEFINED,0,VK_IMAGE_ASPECT_DEPTH_BIT} },
		{ ddspp::R32_FLOAT,{VK_FORMAT_R32_SFLOAT,VK_FORMAT_D32_SFLOAT,VK_FORMAT_R32_UINT,VK_IMAGE_ASPECT_COLOR_BIT,VK_IMAGE_ASPECT_DEPTH_BIT} },
		{ ddspp::R32_UINT,{VK_FORMAT_R32_UINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R32_SINT,{VK_FORMAT_R32_SINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R32_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R24G8_TYPELESS,{VK_FORMAT_UNDEFINED,VK_FORMAT_D24_UNORM_S8_UINT,VK_FORMAT_UNDEFINED} },
		{ ddspp::D24_UNORM_S8_UINT,{VK_FORMAT_UNDEFINED,VK_FORMAT_D24_UNORM_S8_UINT,VK_FORMAT_UNDEFINED,0,VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT} },
		{ ddspp::R24_UNORM_X8_TYPELESS,{VK_FORMAT_UNDEFINED,VK_FORMAT_D24_UNORM_S8_UINT,VK_FORMAT_UNDEFINED,0,VK_IMAGE_ASPECT_DEPTH_BIT} },
		{ ddspp::X24_TYPELESS_G8_UINT,{VK_FORMAT_UNDEFINED,VK_FORMAT_D24_UNORM_S8_UINT,VK_FORMAT_UNDEFINED,0,VK_IMAGE_ASPECT_STENCIL_BIT} },
		{ ddspp::R8G8_TYPELESS,{VK_FORMAT_R8G8_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R8G8_UINT} },
		{ ddspp::R8G8_UNORM,{VK_FORMAT_R8G8_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R8G8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8G8_UINT,{VK_FORMAT_R8G8_UINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R8G8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8G8_SNORM,{VK_FORMAT_R8G8_SNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R8G8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8G8_SINT,{VK_FORMAT_R8G8_SINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R8G8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16_TYPELESS,{VK_FORMAT_R16_UNORM,VK_FORMAT_D16_UNORM,VK_FORMAT_R16_UINT} },
		{ ddspp::R16_FLOAT,{VK_FORMAT_R16_SFLOAT,VK_FORMAT_D16_UNORM,VK_FORMAT_R16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::D16_UNORM,{VK_FORMAT_UNDEFINED,VK_FORMAT_D16_UNORM,VK_FORMAT_UNDEFINED,0,VK_IMAGE_ASPECT_DEPTH_BIT} },
		{ ddspp::R16_UNORM,{VK_FORMAT_R16_UNORM,VK_FORMAT_D16_UNORM,VK_FORMAT_R16_UINT,VK_IMAGE_ASPECT_COLOR_BIT,VK_IMAGE_ASPECT_DEPTH_BIT} },
		{ ddspp::R16_UINT,{VK_FORMAT_R16_UINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16_SNORM,{VK_FORMAT_R16_SNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R16_SINT,{VK_FORMAT_R16_SINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R16_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8_TYPELESS,{VK_FORMAT_R8_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R8_UINT} },
		{ ddspp::R8_UNORM,{VK_FORMAT_R8_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8_UINT,{VK_FORMAT_R8_UINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8_SNORM,{VK_FORMAT_R8_SNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8_SINT,{VK_FORMAT_R8_SINT,VK_FORMAT_UNDEFINED,VK_FORMAT_R8_UINT,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::A8_UNORM,{VK_FORMAT_R8_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT,0} },
		{ ddspp::R9G9B9E5_SHAREDEXP,{VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::R8G8_B8G8_UNORM,{VK_FORMAT_B8G8R8G8_422_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::G8R8_G8B8_UNORM,{VK_FORMAT_G8B8G8R8_422_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC1_TYPELESS,{VK_FORMAT_BC1_RGBA_UNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED} },
		{ ddspp::BC1_UNORM,{VK_FORMAT_BC1_RGBA_UNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC1_UNORM_SRGB,{VK_FORMAT_BC1_RGBA_SRGB_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC2_TYPELESS,{VK_FORMAT_BC2_UNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED} },
		{ ddspp::BC2_UNORM,{VK_FORMAT_BC2_UNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC2_UNORM_SRGB,{VK_FORMAT_BC2_SRGB_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC3_TYPELESS,{VK_FORMAT_BC3_UNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED} },
		{ ddspp::BC3_UNORM,{VK_FORMAT_BC3_UNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC3_UNORM_SRGB,{VK_FORMAT_BC3_SRGB_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC4_TYPELESS,{VK_FORMAT_BC4_UNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED} },
		{ ddspp::BC4_UNORM,{VK_FORMAT_BC4_UNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC4_SNORM,{VK_FORMAT_BC4_SNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC5_TYPELESS,{VK_FORMAT_BC5_UNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED} },
		{ ddspp::BC5_UNORM,{VK_FORMAT_BC5_UNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC5_SNORM,{VK_FORMAT_BC5_SNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::B5G6R5_UNORM,{VK_FORMAT_R5G6B5_UNORM_PACK16,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::B5G5R5A1_UNORM,{VK_FORMAT_A1R5G5B5_UNORM_PACK16,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::B8G8R8A8_UNORM,{VK_FORMAT_B8G8R8A8_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::B8G8R8X8_UNORM,{VK_FORMAT_B8G8R8A8_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT,0} },
		{ ddspp::B8G8R8A8_TYPELESS,{VK_FORMAT_B8G8R8A8_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED} },
		{ ddspp::B8G8R8A8_UNORM_SRGB,{VK_FORMAT_B8G8R8A8_SRGB,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::B8G8R8X8_TYPELESS,{VK_FORMAT_B8G8R8A8_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::B8G8R8X8_UNORM_SRGB,{VK_FORMAT_B8G8R8A8_SRGB,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT,0} },
		{ ddspp::BC6H_TYPELESS,{VK_FORMAT_BC6H_UFLOAT_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED} },
		{ ddspp::BC6H_UF16,{VK_FORMAT_BC6H_UFLOAT_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC6H_SF16,{VK_FORMAT_BC6H_SFLOAT_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC7_TYPELESS,{VK_FORMAT_BC7_UNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED} },
		{ ddspp::BC7_UNORM,{VK_FORMAT_BC7_UNORM_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::BC7_UNORM_SRGB,{VK_FORMAT_BC7_SRGB_BLOCK,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::AYUV,{VK_FORMAT_R8G8B8A8_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_R8G8B8A8_UINT,VK_IMAGE_ASPECT_COLOR_BIT,0} },
		{ ddspp::NV12,{VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_PLANE_0_BIT | VK_IMAGE_ASPECT_PLANE_1_BIT} },
		{ ddspp::OPAQUE_420,{VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_PLANE_0_BIT | VK_IMAGE_ASPECT_PLANE_1_BIT} },
		{ ddspp::YUY2,{VK_FORMAT_G8B8G8R8_422_UNORM,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
		{ ddspp::B4G4R4A4_UNORM,{VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT,VK_FORMAT_UNDEFINED,VK_FORMAT_UNDEFINED,VK_IMAGE_ASPECT_COLOR_BIT} },
	};

static VkFormat GetDSSVulkanFormat( unsigned int DXGIFormat )
	{
	std::map<unsigned int, FormatDXVKConvert>::const_iterator it = DXToVulkanFormatConversion.find( DXGIFormat );
	if(it == DXToVulkanFormatConversion.end())
		{
		return VK_FORMAT_UNDEFINED;
		}
	if( it->second.PreferredColor != VK_FORMAT_UNDEFINED)
		return it->second.PreferredColor;
	if(it->second.PreferredDepth != VK_FORMAT_UNDEFINED)
		return it->second.PreferredDepth;
	return it->second.BitCompatible;
	}